import marimo

__generated_with = "unknown"
app = marimo.App()


@app.cell
def setup_pyoso():
    # This code sets up pyoso to be used as a database provider for this notebook
    # This code is autogenerated. Modification could lead to unexpected results :)
    import pyoso
    pyoso_db_conn = pyoso.Client().dbapi_connection()
    return (pyoso_db_conn,)


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell
def _(mo):
    mo.md("""

    # OSO Coverage

    OSO maintains a large repository of open source projects called oss-directory. It's more than just an awesome list ... it's the starting point of the OSO data pipeline. We run indexers on every artifact linked to projects in the directory to produce metrics for our API and dashboards. We also use other project registries -- OP Atlas, Crypto Ecosystems, DefiLlama, OpenLabelsInitiative.

    This dashboard provides an overview of all the labeling we and our partners have done!

    ![img](https://docs.opensource.observer/assets/images/project-directory-7f628a5f09a6983c43ea4da6750b8b67.png)

    """)
    return


@app.cell
def _(mo, pyoso_db_conn):
    df = mo.sql(
        f"""
        WITH artifacts AS (
            SELECT 
            	project_source,
                artifact_source,
                APPROX_DISTINCT(project_id) AS num_projects,
                APPROX_DISTINCT(artifact_id) AS num_artifacts
            FROM artifacts_by_project_v1
            GROUP BY 1,2
        )
        SELECT
            artifact_source,
            CASE
            	WHEN artifact_source IN ('GITHUB', 'NPM', 'GO', 'PIP', 'NUGET', 'RUST', 'GEM')
            		THEN '1. Software'
            	WHEN chains.chain IS NOT NULL THEN '4. Superchain'
            	WHEN artifact_source IN ('WWW', 'TWITTER', 'FARCASTER') THEN '3. Websites'
            	WHEN artifact_source IN ('DEFILLAMA', 'OSS_DIRECTORY') THEN '2. Data Sources'
            	ELSE '5. Other Blockchains'
            END AS artifact_source_type,
            project_source,
            num_projects,
            num_artifacts
        FROM artifacts
        LEFT JOIN int_superchain_chain_names AS chains
            ON artifacts.artifact_source = chains.chain
        ORDER BY 2,1,3
        """,
        output=False,
        engine=pyoso_db_conn
    )
    return (df,)


@app.cell
def _(df, mo):
    mo.ui.table(
        df.pivot(
            columns='project_source',
            index=['artifact_source_type', 'artifact_source'],
            values='num_artifacts'
        ),
        show_data_types=False,
        show_column_summaries=False
    )
    return


@app.cell
def _():
    return


if __name__ == "__main__":
    app.run()
