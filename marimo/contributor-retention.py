import marimo

__generated_with = "0.15.3"
app = marimo.App(width="medium")


@app.cell
def setup_pyoso():
    # This code sets up pyoso to be used as a database provider for this notebook
    # This code is autogenerated. Modification could lead to unexpected results :)
    import marimo as mo
    from pyoso import Client
    client = Client()
    try:
        pyoso_db_conn = client.dbapi_connection()    
    except Exception as e:
        pyoso_db_conn = None
    return client, mo


@app.cell
def _(mo):
    mo.md(
        """
    # **Contributor  Retention**
    <small>Author: <span style="background-color: #f0f0f0; padding: 2px 4px; border-radius: 3px;">OSO Team</span> Â· Last Updated: <span style="background-color: #f0f0f0; padding: 2px 4px; border-radius: 3px;"> 15 September 2025</span></small>

    This app visualizes monthly trends of new, churned, and active contributors to open source software projects.
    Add your project by submitting a pull request to [oss-directory](https://github.com/opensource-observer/oss-directory)!
    """
    )
    return


@app.cell
def _(mo):
    mo.accordion({
        "Methodology": """
        - Contributions include commits, issues, pull requests, and code reviews
        - A *contributor* is defined as a GitHub user who has made at least one contribution to the project in the given month
        - *New* contributors are contributors who have made their first contribution to the project in the given month
        - *Churned* contributors are contributors who were active in the project in the previous month, but are no longer active in the current month
        - *Active* contributors are contributors who have made at least one contribution to the project in the given month
        - Data is bucketed into monthly intervals, going back to the earliest available data for the project
        - If contributions were made while a repo was private or associated with another organization, those events are not included in the data
        - Data is refreshed and backfilled on a monthly basis
        """,
        "Data Sources": """
        - [OSS Directory](https://github.com/opensource-observer/oss-directory)
        - [Electric Capital Crypto Ecosystems](https://github.com/electric-capital/crypto-ecosystems)
        - [OP Atlas](https://atlas.optimism.io/)
        - [GitHub Archive](https://www.gharchive.org/)

        """,
        "Further Resources": """
        - [Getting Started with Pyoso](https://docs.opensource.observer/docs/get-started/python)
        - [Using the Semantic Layer](https://docs.opensource.observer/docs/get-started/using-semantic-layer)
        - [Marimo Documentation](https://docs.marimo.io/)
        """
    })
    return


@app.cell
def _():
    import pandas as pd
    import plotly.graph_objects as go
    import plotly.express as px
    return go, pd


@app.cell
def _():
    DEFAULT_PROJECT_OPTIONS = {
        'OSS_DIRECTORY': 'Open Source Observer',
        'CRYPTO_ECOSYSTEMS': 'Ethereum Virtual Machine Stack',
        'OP_ATLAS': 'Solidity'
    }
    return (DEFAULT_PROJECT_OPTIONS,)


@app.cell
def _(mo):
    project_source_input = mo.ui.dropdown(
        options={
            'OSO (oss-directory)': 'OSS_DIRECTORY',
            'Electric Capital (crypto-ecosystems)': 'CRYPTO_ECOSYSTEMS',
            'OP Atlas': 'OP_ATLAS',
        },
        value='OSO (oss-directory)',
        label='Step 1. Choose a project registry',
        full_width=True
    )

    mo.vstack([
        mo.md("### Configuration"),
        project_source_input
    ])
    return (project_source_input,)


@app.cell
def _(DEFAULT_PROJECT_OPTIONS, df_projects, mo, project_source_input):
    _df_projects = (
        df_projects
        .query(f"project_source == '{project_source_input.value}'")
        .sort_values(by='star_count', ascending=False)
        .set_index('display_name')
    )

    project_name_input = mo.ui.dropdown(
        options=_df_projects['project_id'].to_dict(),
        value=DEFAULT_PROJECT_OPTIONS.get(project_source_input.value),
        label="Step 2. Choose a project",
        full_width=True
    )
    project_name_input
    return (project_name_input,)


@app.cell
def _(mo):
    run_analysis_input = mo.ui.run_button(
        label="Fetch contributor metrics",
        full_width=True
    )
    run_analysis_input
    return (run_analysis_input,)


@app.cell
def _(client):
    _query = f"""
    WITH projects AS (
      SELECT DISTINCT
        project_source,
        project_id,
        display_name
      FROM projects_v1
      WHERE
        (project_source = 'OSS_DIRECTORY' AND project_namespace = 'oso')
        OR (project_source = 'CRYPTO_ECOSYSTEMS' AND project_namespace = 'eco')
        OR (project_source = 'OP_ATLAS' AND project_namespace = '')    
    )
    SELECT DISTINCT
      p.project_id,
      p.project_source,
      p.display_name,
      km.amount AS star_count
    FROM key_metrics_by_project_v0 AS km
    JOIN projects AS p ON p.project_id = km.project_id
    JOIN metrics_v0 AS m ON km.metric_id = m.metric_id
    WHERE
      m.metric_name = 'GITHUB_stars_over_all_time'
      AND km.amount >= 100
    ORDER BY
      p.display_name ASC
    """

    df_projects = client.to_pandas(_query)
    return (df_projects,)


@app.cell
def _(client, mo, project_name_input, run_analysis_input):
    mo.stop(not run_analysis_input.value)

    _query = f"""
    WITH timeseries_metrics AS (
      SELECT
        sample_date,
        CASE WHEN metric_name = 'GITHUB_new_contributors_monthly' THEN amount END AS new_contributors,
        CASE WHEN metric_name = 'GITHUB_churned_contributors_monthly' THEN -amount END AS churned_contributors,
        CASE WHEN metric_name = 'GITHUB_active_contributors_monthly' THEN amount END AS active_contributors
      FROM timeseries_metrics_by_project_v0
      JOIN metrics_v0 USING(metric_id)
      WHERE 
        project_id = '{project_name_input.value}'
        AND metric_name IN (
          'GITHUB_new_contributors_monthly',
          'GITHUB_churned_contributors_monthly',
          'GITHUB_active_contributors_monthly'
        )
    ),
    params AS (
      SELECT MIN(sample_date) AS start_month,
             date_trunc('month', current_date) AS end_month
      FROM timeseries_metrics
    ),
    months AS (
      SELECT m AS sample_date
      FROM UNNEST(SEQUENCE(
        (SELECT start_month FROM params),
        (SELECT end_month FROM params)-INTERVAL '1' month,
        INTERVAL '1' month
      )) t(m)
    )
    SELECT
      m.sample_date,
      SUM(COALESCE(t.new_contributors,0)) AS new_contributors,
      SUM(COALESCE(t.churned_contributors,0)) AS churned_contributors,
      SUM(COALESCE(t.active_contributors,0)) AS active_contributors  
    FROM months AS m
    LEFT JOIN timeseries_metrics AS t ON m.sample_date = t.sample_date
    GROUP BY 1
    ORDER BY 1
    """
    df_timeseries = client.to_pandas(_query)
    return (df_timeseries,)


@app.cell
def _(df_timeseries, go, mo, pd):
    def make_contributor_chart(df):
        d = df.sort_values("sample_date").copy()
        d["sample_date"] = pd.to_datetime(d["sample_date"])

        fig = go.Figure()

        # Inflows
        fig.add_bar(
            name="New",
            x=d["sample_date"],
            y=d["new_contributors"],
            marker_color="#AAA",
            marker_line=dict(color="black", width=.5),
            opacity=0.8,
            hovertemplate="New: %{y:,}<extra></extra>"
        )

        # Outflows (already negative)
        fig.add_bar(
            name="Churned",
            x=d["sample_date"],
            y=d["churned_contributors"],
            marker_color="white",
            marker_line=dict(color="black", width=.5),
            hovertemplate="Churned: %{y:,}<extra></extra>"
        )

        # Active (overlay as black line on same y-axis)
        fig.add_scatter(
            name="Active (total)",
            x=d["sample_date"],
            y=d["active_contributors"],
            mode="lines",
            line=dict(color="black", width=2),
            hovertemplate="Active: %{y:,}<extra></extra>"
        )

        fig.update_layout(
            title="",
            barmode="relative",
            hovermode="x unified",
            plot_bgcolor="white",
            paper_bgcolor="white",
            font=dict(size=12, color="#111"),
            margin=dict(t=0, l=0, r=0, b=50),
            legend=dict(
                orientation="h",
                yanchor="top", y=1.02,
                xanchor="left", x=0,
                bordercolor="black", borderwidth=0
            ),
            xaxis=dict(
                showgrid=False,
                linecolor="#000", linewidth=1,
                ticks="outside", tickformat="%b %Y"
            ),
            yaxis=dict(
                title="",
                showgrid=True, gridcolor="#DDD",
                zeroline=True, zerolinecolor="black", zerolinewidth=1,
                linecolor="#000", linewidth=1,
                ticks="outside"
            )
        )

        fig.add_hline(y=0, line_width=1, line_color="black")

        return fig

    fig = make_contributor_chart(df_timeseries)

    mo.vstack([
        mo.md('### Contributor Retention'),
        mo.ui.plotly(fig)
    ])
    return


@app.cell
def _():
    return


if __name__ == "__main__":
    app.run()
