import marimo

__generated_with = "0.16.2"
app = marimo.App(width="medium")


@app.cell
def setup_pyoso():
    # This code sets up pyoso to be used as a database provider for this notebook
    # This code is autogenerated. Modification could lead to unexpected results :)
    import marimo as mo
    from pyoso import Client
    client = Client()
    try:
        pyoso_db_conn = client.dbapi_connection()    
    except Exception as e:
        pyoso_db_conn = None
    return (mo,)


@app.cell
def about_app(mo):
    mo.md(
        """
    # A longitudinal assessment of Gitcoin Grants impact on open source developer activity

    *An interactive analysis examining the relationship between Gitcoin Grants funding and developer ecosystem growth from 2018-2023.*

    <small>Author: <span style="background-color: #f0f0f0; padding: 2px 4px; border-radius: 3px;">OSO Team</span> Â· Published: <span style="background-color: #f0f0f0; padding: 2px 4px; border-radius: 3px;">February 2024</span></small>
    """
    )
    return


@app.cell
def import_libraries():
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go
    return go, pd


@app.cell
def configuration_settings():
    # Color constants
    PURPLE = '#6935FF'
    GREEN = '#3A4934'
    WHITE = 'WHITE'
    CYAN = '#A3E5E7'

    # Date constants
    START = '2018Q1'
    END = '2023Q4'

    # Data source
    DATA_URL_BASE = "https://raw.githubusercontent.com/opensource-observer/insights/refs/heads/main/analysis/gitcoin/data"
    return CYAN, DATA_URL_BASE, END, GREEN, START, WHITE


@app.cell
def load_project_names(DATA_URL_BASE, pd):
    project_names = pd.read_json(f"{DATA_URL_BASE}/gitcoin-project-names.json").set_index('slug')['name'].to_dict()
    return (project_names,)


@app.cell
def load_grants_data(DATA_URL_BASE, pd):
    g = pd.read_csv(f"{DATA_URL_BASE}/csv/gitcoin_allo%2Bcgrants_all.csv", index_col=0)

    # load and arrange the funding round data
    g['quarter'] = pd.PeriodIndex(g.round_date, freq='Q')
    g['quarter'] = g['quarter'].apply(str)

    def name_round(rid, rname):
        if '0x' in rid:
            return rname
        else:
            return f"GR{rid}"
    g['round'] = g.apply(lambda x: name_round(x['round_id'], x['round_name']), axis=1)

    # manual updates to clean a few rounds that are on the edge of a quarter
    g.loc[g['round'] == 'GR2', 'quarter'] = '2019Q2'
    g.loc[g['round'] == 'GR4', 'quarter'] = '2019Q4'

    # rename allo grants
    g.loc[g['quarter'] == '2023Q1', 'round'] = 'Alpha'
    g.loc[g['quarter'] == '2023Q2', 'round'] = 'Beta'
    g.loc[g['quarter'] == '2023Q3', 'round'] = 'GG18'
    g.loc[g['quarter'] == '2023Q4', 'round'] = 'GG19'
    return (g,)


@app.cell
def load_impact_data(DATA_URL_BASE, END, START, pd):
    # load and arrange the impact metrics
    impact = (
        pd.read_csv(f"{DATA_URL_BASE}/csv/gitcoin_active_devs_impact_by_quarter.csv", index_col=0)
        .set_index(['project_slug', 'quarter'])
        .join(
            pd.read_csv(f"{DATA_URL_BASE}/csv/gitcoin_contributor_impact_by_quarter.csv", index_col=0)
            .groupby(['project_slug', 'quarter'])
            ['from_name']
            .nunique()
            .rename('contributors')
        )
        .reset_index()
    )
    impact = impact[
        (impact['project_slug'] != 'gitcoin') 
        & (impact['quarter'] >= START) 
        & (impact['quarter'] <= END)
    ]

    # filter on the top 50 OSS projects
    top50_oss_slugs = (    
        impact
        .groupby('project_slug')
        ['contributors']
        .max()
        .sort_values()
        .tail(50)
        .index
        .to_list()
    )
    impact = impact[impact['project_slug'].isin(top50_oss_slugs)]

    return impact, top50_oss_slugs


@app.cell
def filter_grants_data(g, top50_oss_slugs):
    # filter on the relevant grants data
    grants = g.copy()
    grants = grants[['oso_slug', 'round_id', 'round_name', 'quarter', 'round', 'round_date', 'total_usd']]
    grants = grants[grants['oso_slug'].isin(top50_oss_slugs)]
    return (grants,)


@app.cell
def prepare_quarterly_stats(grants, impact):
    grant_stats = grants.groupby(['quarter', 'round'])['total_usd'].sum()

    quarters = sorted(impact['quarter'].unique())
    quarter_mapping = dict(zip(quarters, range(len(quarters))))

    projects_first_rounds = (
        grants
        .groupby(['oso_slug'])
        ['quarter']
        .min()
        .reset_index()
        .groupby('quarter')
        ['oso_slug']
        .agg(lambda x: sorted(x))
    )
    ordered_projects_list = [p for lst in projects_first_rounds for p in lst]

    return (
        grant_stats,
        ordered_projects_list,
        projects_first_rounds,
        quarter_mapping,
        quarters,
    )


@app.cell
def blog_intro(g, mo):
    total_usd = g['total_usd'].sum()
    match_usd = g['match_usd'].sum()
    multiplier = total_usd / match_usd

    total_stat = mo.stat(
        label="Total Funding",
        value=f"${total_usd/1_000_000:.1f}M",
        bordered=True
    )

    matching_stat = mo.stat(
        label="Matching Pools",
        value=f"${match_usd/1_000_000:.1f}M",
        bordered=True
    )

    multiplier_stat = mo.stat(
        label="QF Multiplier",
        value=f"{multiplier:.2f}x",
        bordered=True
    )

    applications_stat = mo.stat(
        label="Applications",
        value=f"{len(g):,}",
        bordered=True
    )

    projects_stat = mo.stat(
        label="Unique Projects",
        value=f"{len(g['grant_address'].unique()):,}",
        bordered=True
    )

    mo.vstack([
        mo.md("""
        Gitcoin has been providing grants to open source software teams since 2019.

        Over the last four years, more than $38M has been distributed via quadratic funding across 4,000+ projects and over 18,000 project applications. This includes both $22M in matching funds and $16M in direct donations from the community. On average, for every $1.00 put up by a matching fund donor, they have raised an additional $0.75 from the community.
     Overall, Gitcoin has allocated [more than $50M](https://impact.gitcoin.co/) towards public goods through a range of mechanisms, including direct donations and bounties, as well as quadratic funding.
     """),

        mo.md("""### Gitcoin QF in Numbers"""),
    mo.hstack([total_stat, matching_stat, multiplier_stat, applications_stat, projects_stat], widths="equal", gap=1),
    
    mo.md("""
        Although there are often anecdotal reports about Gitcoin's impact from projects, there have been few attempts to look longitudinally across a cohort of projects and track their impact over multiple years. In this piece, we identify a group of 50 open source software projects that have received significant funding across multiple Gitcoin Grants rounds and then we examine the relationship between grants and growth.

        Within this cohort, we see that for every $1M that has been paid out in grants since 2019, there are 7 full-time developers who are still around today. If we factor in the crowdfund multiplier, then every $1M put into the matching pool is associated with 13 retained full-time developers. These results have held up even during the bear market.

        Although these numbers are likely an upper bound, we can put them in context by comparing them to the broader performance of the crypto sector. According to Electric Capital's 2023 edition of the [Developer Report](https://www.developerreport.com/reports/devs/2023?s=developer-report), the sector has a total of 6,889 full-time open source developers. Meanwhile, more than [$76 billion](https://pitchbook.com/news/reports/q4-2023-crypto-report) has been invested by venture capital firms since 2018 according to Pitchbook. This translates into a return of less than 0.1 full-time developers for every $1M raised in venture capital.
        """),
    ])
    return (multiplier,)


@app.cell
def blog_caveats(mo):
    mo.md(
        """
    ## Some caveats

    First, as we all know, correlation is not causation. The 50 OSS projects included in this analysis have all grown and increased their impact while receiving quarterly funding injections from Gitcoin Grants. However, this relationship is not causal. We have neither a counterfactual nor a good way to model what their growth might have been in the absence of Gitcoin Grants.

    Second, Gitcoin Grants is not the only funding mechanism that exists. Most if not all of these projects have received other grants and have their own direct fundraising channels. Further work could be done to determine how significant Gitcoin's funding has been to these projects over the years.

    Third, there is a built-in survivorship bias in the data. Our cohort was selected by looking for projects that have been involved in multiple rounds. We don't have as much data on the projects that dropped out after several rounds. For every Uniswap and Plasma Group that only participated in a few rounds and now controls a billion dollar treasury, there are dozens if not hundreds of projects that people have forgotten about. That said, it is hard to find examples of projects that did well on Gitcoin Grants initially and then quickly became inactive. So, while survivorship bias is relevant, it probably doesn't have a huge effect on the results.
    """
    )
    return


@app.cell
def blog_rounds_intro(GREEN, WHITE, g, go, mo):
    _data = g.groupby(['quarter', 'round'])['total_usd'].sum().iloc[:19].reset_index().set_index('round')

    _fig = go.Figure()
    _fig.add_trace(go.Bar(
        x=_data.index,
        y=_data['total_usd'],
        marker_color=GREEN,
        text=[f"${v/1_000_000:.1f}M" for v in _data['total_usd']],
        textposition='outside',
        hovertemplate='<b>%{x}</b><br>$%{y:,.0f}<extra></extra>'
    ))

    _fig.update_layout(
        title=dict(
            text='<b>Amount raised per round (Gitcoin Grants program)</b>',
            x=0,
            xanchor='left'
        ),
        paper_bgcolor=WHITE,
        plot_bgcolor=WHITE,
        font=dict(family="monospace", size=12, color=GREEN),
        height=400,
        margin=dict(t=50, l=50, r=20, b=50),
        showlegend=False,
        xaxis=dict(
            title='',
            showgrid=False,
            linecolor=GREEN,
            tickangle=0
        ),
        yaxis=dict(
            title='',
            showgrid=True,
            gridcolor='#E0E0E0',
            linecolor=GREEN,
            tickformat='$,.0f'
        )
    )

    mo.vstack([
        mo.md("""
        ## Gitcoin's growth and changes over 19 rounds

        It's worth setting the stage by giving an overview of how Gitcoin's grants rounds have evolved. For the most part, Gitcoin has run a major round every quarter. The sizes of the rounds has ebbed and flowed with the project's maturity and market cycles, but these rounds have been an important touchstone for the Ethereum open source community for the last four years.
        """),
        mo.ui.plotly(_fig)
    ])
    return


@app.cell
def blog_phase1(GREEN, WHITE, g, go, mo):
    dff = g[g['quarter'] < '2020Q1'][['project_name', 'amount_usd', 'match_usd', 'total_usd', 'round']].dropna().sort_values(by='total_usd', ascending=False)
    n = len(dff['total_usd'])
    total = dff['total_usd'].sum() / 1000000
    max_y = dff['total_usd'].iloc[1:].max() if len(dff) > 1 else dff['total_usd'].max()
    qf = dff[dff['match_usd'] > 0]['match_usd'].sum()
    rf = dff[dff['match_usd'] > 0]['amount_usd'].sum()
    multiple = rf / qf if qf > 0 else 0
    round_names = sorted(dff['round'].unique())
    title = f'<b>Gitcoin Grants: {round_names[0]}-{round_names[-1]}</b>'
    subtitle = f'Total = ${total:.1f}M DAI, QF multiplier = {multiple:.2f}x'

    short_tail = dff[dff['match_usd'] > 0].groupby('project_name')['total_usd'].sum().sort_values(ascending=False).head(10)
    top_projects_text = '<br>'.join(['<b>Top Projects:</b>'] + [f'â¢ {p}' for p in short_tail.index.unique()])

    _fig = go.Figure()
    _fig.add_trace(go.Bar(
        x=list(range(len(dff))),
        y=dff['total_usd'] / 1000,
        marker_color=GREEN,
        hovertemplate='<b>Project %{x}</b><br>$%{y:.2f}K<extra></extra>',
        width=1
    ))

    _fig.update_layout(
        title=dict(
            text=f'{title}<br><sub>{subtitle}</sub>',
            x=0,
            xanchor='left'
        ),
        paper_bgcolor=WHITE,
        plot_bgcolor=WHITE,
        font=dict(family="monospace", size=12, color=GREEN),
        height=400,
        margin=dict(t=80, l=50, r=20, b=50),
        showlegend=False,
        xaxis=dict(
            title='Num project applications',
            showgrid=False,
            linecolor=GREEN,
            range=[0, n]
        ),
        yaxis=dict(
            title='Total funding per project (per round)',
            showgrid=True,
            gridcolor='#E0E0E0',
            linecolor=GREEN,
            tickformat='$,.0f',
            ticksuffix='K',
            range=[0, max_y / 1000]
        ),
        annotations=[
            dict(
                x=n * 0.05,
                y=max_y / 1000,
                text=top_projects_text,
                showarrow=False,
                align='left',
                xanchor='left',
                yanchor='top',
                font=dict(size=10)
            )
        ]
    )

    mo.vstack([
        mo.md("""
        ### The early years: GR1-GR4 [2019-2020]

        The first four Gitcoin rounds distributed less than $1M (combined) across over 300 applicants, but were very focused on projects directly serving the core Ethereum community.

        Stalwarts like EthHub, Lighthouse, Prysm, and ethers.js were the first "short tail" public goods to emerge. Plasma Group (now OP Labs) and Uniswap were also near the fat tail of the distribution in these early rounds and have since gone on to become major ecosystem funders in their own right.

        In GR1-GR4, for every $1 put up by match funders, they got an additional $0.83 from crowdfunders.
        """),
        mo.ui.plotly(_fig)
    ])
    return


@app.cell
def blog_phase2(GREEN, WHITE, g, go, mo):
    dff = g[(g['quarter'] >= '2020Q1') & (g['quarter'] < '2021Q2')][['project_name', 'amount_usd', 'match_usd', 'total_usd', 'round']].dropna().sort_values(by='total_usd', ascending=False)
    n = len(dff['total_usd'])
    total = dff['total_usd'].sum() / 1000000
    max_y = dff['total_usd'].iloc[1:].max() if len(dff) > 1 else dff['total_usd'].max()
    qf = dff[dff['match_usd'] > 0]['match_usd'].sum()
    rf = dff[dff['match_usd'] > 0]['amount_usd'].sum()
    multiple = rf / qf if qf > 0 else 0
    round_names = sorted(dff['round'].unique())
    title = f'<b>Gitcoin Grants: {round_names[0]}-{round_names[-1]}</b>'
    subtitle = f'Total = ${total:.1f}M DAI, QF multiplier = {multiple:.2f}x'

    short_tail = dff[dff['match_usd'] > 0].groupby('project_name')['total_usd'].sum().sort_values(ascending=False).head(10)
    top_projects_text = '<br>'.join(['<b>Top Projects:</b>'] + [f'â¢ {p}' for p in short_tail.index.unique()])

    _fig = go.Figure()
    _fig.add_trace(go.Bar(
        x=list(range(len(dff))),
        y=dff['total_usd'] / 1000,
        marker_color=GREEN,
        hovertemplate='<b>Project %{x}</b><br>$%{y:.2f}K<extra></extra>',
        width=1
    ))

    _fig.update_layout(
        title=dict(
            text=f'{title}<br><sub>{subtitle}</sub>',
            x=0,
            xanchor='left'
        ),
        paper_bgcolor=WHITE,
        plot_bgcolor=WHITE,
        font=dict(family="monospace", size=12, color=GREEN),
        height=400,
        margin=dict(t=80, l=50, r=20, b=50),
        showlegend=False,
        xaxis=dict(
            title='Num project applications',
            showgrid=False,
            linecolor=GREEN,
            range=[0, n]
        ),
        yaxis=dict(
            title='Total funding per project (per round)',
            showgrid=True,
            gridcolor='#E0E0E0',
            linecolor=GREEN,
            tickformat='$,.0f',
            ticksuffix='K',
            range=[0, max_y / 1000]
        ),
        annotations=[
            dict(
                x=n * 0.05,
                y=max_y / 1000,
                text=top_projects_text,
                showarrow=False,
                align='left',
                xanchor='left',
                yanchor='top',
                font=dict(size=10)
            )
        ]
    )

    mo.vstack([
        mo.md("""
        ### The start of the bull run: GR5-GR9 [2020-2021]

        The next five Gitcoin rounds occurred during Covid lockdowns, DeFi summer, and the beginning of the NFT craze.

        Coin Center and Bankless were two of the hottest non-OSS projects during this period. This is also the same period when DAppNode and Rotki started to become fixtures of the OSS rounds.

        Over $4M was distributed to projects during this period. The multiplier for matching pool funders peaked at $1.23, as Gitcoin's user base became larger, more diverse, and potentially more airdrop-aware.
        """),
        mo.ui.plotly(_fig)
    ])
    return


@app.cell
def blog_phase3(GREEN, WHITE, g, go, mo):
    dff = g[(g['quarter'] >= '2021Q2') & (g['quarter'] < '2023Q1')][['project_name', 'amount_usd', 'match_usd', 'total_usd', 'round']].dropna().sort_values(by='total_usd', ascending=False)
    n = len(dff['total_usd'])
    total = dff['total_usd'].sum() / 1000000
    max_y = dff['total_usd'].iloc[1:].max() if len(dff) > 1 else dff['total_usd'].max()
    qf = dff[dff['match_usd'] > 0]['match_usd'].sum()
    rf = dff[dff['match_usd'] > 0]['amount_usd'].sum()
    multiple = rf / qf if qf > 0 else 0
    round_names = sorted(dff['round'].unique())
    title = f'<b>Gitcoin Grants: {round_names[0]}-{round_names[-1]}</b>'
    subtitle = f'Total = ${total:.1f}M DAI, QF multiplier = {multiple:.2f}x'

    short_tail = dff[dff['match_usd'] > 0].groupby('project_name')['total_usd'].sum().sort_values(ascending=False).head(10)
    top_projects_text = '<br>'.join(['<b>Top Projects:</b>'] + [f'â¢ {p}' for p in short_tail.index.unique()])

    _fig = go.Figure()
    _fig.add_trace(go.Bar(
        x=list(range(len(dff))),
        y=dff['total_usd'] / 1000,
        marker_color=GREEN,
        hovertemplate='<b>Project %{x}</b><br>$%{y:.2f}K<extra></extra>',
        width=1
    ))

    _fig.update_layout(
        title=dict(
            text=f'{title}<br><sub>{subtitle}</sub>',
            x=0,
            xanchor='left'
        ),
        paper_bgcolor=WHITE,
        plot_bgcolor=WHITE,
        font=dict(family="monospace", size=12, color=GREEN),
        height=400,
        margin=dict(t=80, l=50, r=20, b=50),
        showlegend=False,
        xaxis=dict(
            title='Num project applications',
            showgrid=False,
            linecolor=GREEN,
            range=[0, n]
        ),
        yaxis=dict(
            title='Total funding per project (per round)',
            showgrid=True,
            gridcolor='#E0E0E0',
            linecolor=GREEN,
            tickformat='$,.0f',
            ticksuffix='K',
            range=[0, max_y / 1000]
        ),
        annotations=[
            dict(
                x=n * 0.05,
                y=max_y / 1000,
                text=top_projects_text,
                showarrow=False,
                align='left',
                xanchor='left',
                yanchor='top',
                font=dict(size=10)
            )
        ]
    )

    mo.vstack([
        mo.md("""
        ### The adolescent years: GR10-GR15 [2021-2022]

        These rounds coincided with the peak of the bull market and the subsequent FTX blowup. During this period, Gitcoin launched GTC and turned into a DAO, expanded to serve a much larger community, and attracted a more diverse base of match funders.

        Nearly $25M was distributed to projects -- across an extremely long tail of applicants. These large rounds were significant crowdfunding events, though the multiplier for match funders dropped to around $0.65 on the dollar.

        Already-popular projects like Coin Center, Rotki, and ether.js were joined at the top of the results page by several new entrants to the Ethereum ecosystem including DefiLlama and Umbra (ScopeLift). In addition, non-crypto native OSS projects like Electronic Frontier Foundation and Tor started participating in Gitcoin rounds and performing well. Cause rounds in domains like DeSci, support for Ukraine, and ReFi sprouted up during this period too.

        GR15 was the last round run on "cGrants". Gitcoin skipped a quarter at the end of 2022 and then migrated its grants rounds to Allo protocol in early 2023.
        """),
        mo.ui.plotly(_fig)
    ])
    return


@app.cell
def blog_phase4(GREEN, WHITE, g, go, mo):
    dff = g[(g['quarter'] >= '2023Q1') & (g['quarter'] < '2024Q1')][['project_name', 'amount_usd', 'match_usd', 'total_usd', 'round']].dropna().sort_values(by='total_usd', ascending=False)
    n = len(dff['total_usd'])
    total = dff['total_usd'].sum() / 1000000
    max_y = dff['total_usd'].iloc[1:].max() if len(dff) > 1 else dff['total_usd'].max()
    qf = dff[dff['match_usd'] > 0]['match_usd'].sum()
    rf = dff[dff['match_usd'] > 0]['amount_usd'].sum()
    multiple = rf / qf if qf > 0 else 0
    round_names = sorted(dff['round'].unique())
    title = f'<b>Gitcoin Grants: {round_names[0]}-{round_names[-1]}</b>'
    subtitle = f'Total = ${total:.1f}M DAI, QF multiplier = {multiple:.2f}x'

    short_tail = dff[dff['match_usd'] > 0].groupby('project_name')['total_usd'].sum().sort_values(ascending=False).head(10)
    top_projects_text = '<br>'.join(['<b>Top Projects:</b>'] + [f'â¢ {p}' for p in short_tail.index.unique()])

    _fig = go.Figure()
    _fig.add_trace(go.Bar(
        x=list(range(len(dff))),
        y=dff['total_usd'] / 1000,
        marker_color=GREEN,
        hovertemplate='<b>Project %{x}</b><br>$%{y:.2f}K<extra></extra>',
        width=1
    ))

    _fig.update_layout(
        title=dict(
            text=f'{title}<br><sub>{subtitle}</sub>',
            x=0,
            xanchor='left'
        ),
        paper_bgcolor=WHITE,
        plot_bgcolor=WHITE,
        font=dict(family="monospace", size=12, color=GREEN),
        height=400,
        margin=dict(t=80, l=50, r=20, b=50),
        showlegend=False,
        xaxis=dict(
            title='Num project applications',
            showgrid=False,
            linecolor=GREEN,
            range=[0, n]
        ),
        yaxis=dict(
            title='Total funding per project (per round)',
            showgrid=True,
            gridcolor='#E0E0E0',
            linecolor=GREEN,
            tickformat='$,.0f',
            ticksuffix='K',
            range=[0, max_y / 1000]
        ),
        annotations=[
            dict(
                x=n * 0.05,
                y=max_y / 1000,
                text=top_projects_text,
                showarrow=False,
                align='left',
                xanchor='left',
                yanchor='top',
                font=dict(size=10)
            )
        ]
    )

    mo.vstack([
        mo.md("""
        ### Grants on Allo: Alpha Round to GG19 [2023]

        Gitcoin has now done four main rounds on Allo, distributing $8.4M to around 2500 applicants. These rounds have been deployed on a variety of chains, from Ethereum mainnet, to L2s like Arbitrum and Optimism, to side chains like Phantom and Polygon, and even on the Public Goods Network (PGN).

        The top projects during this period all have very strong user bases, eg, JediSwap, DefiLlama, Mummy, and Hey.xyz (Lenster). L2Beat and Revoke.cash are two of the younger projects that quickly moved to the short tail of the distribution.

        There has been a lot of experimentation during this most recent phase, not just in terms of the protocol and the multitude of chains, but also around Sybil defense / Gitcoin Passport and encouraging communities to run their own rounds on Grants Stack.

        This brings us to the present day.
        """),
        mo.ui.plotly(_fig)
    ])
    return


@app.cell
def blog_sogood(GREEN, WHITE, go, impact, mo, project_names):
    data = (
        impact.pivot_table(index='project_slug', columns='quarter', values='contributors')
        .iloc[:, -4:]
        .fillna(0)
        .mean(axis=1)
        .sort_values(ascending=False)
        .rename(index=project_names)
    )

    _fig = go.Figure()
    _fig.add_trace(go.Bar(
        x=data.index,
        y=data.values,
        marker_color=GREEN,
        hovertemplate='<b>%{x}</b><br>%{y:.1f} contributors<extra></extra>'
    ))

    _fig.update_layout(
        title=dict(
            text='<b>Avg quarterly contributors for the top 50 OSS projects on Gitcoin Grants in 2023</b>',
            x=0,
            xanchor='left'
        ),
        paper_bgcolor=WHITE,
        plot_bgcolor=WHITE,
        font=dict(family="monospace", size=12, color=GREEN),
        height=500,
        margin=dict(t=50, l=50, r=20, b=150),
        showlegend=False,
        xaxis=dict(
            title='',
            showgrid=False,
            linecolor=GREEN,
            tickangle=-45
        ),
        yaxis=dict(
            title='',
            showgrid=True,
            gridcolor='#E0E0E0',
            linecolor=GREEN
        )
    )

    mo.vstack([
        mo.md("""
        ## So far, so good, so what?

        Gitcoin's dynamics seem to reward projects that play the long game - that is, projects who build a following and appear consistently in grants rounds.

        A key question this raises is whether these projects were already big and popular (and Gitcoin was a good way for them to capitalize on that), or whether Gitcoin contributed to a virtuous cycle of increased funding, increased work / impact, increased reputation, etc.

        We can look at the relationship between Gitcoin grants and projects' growth on at least one dimension of productivity: developer activity. As a large part of Gitcoin's project base comes from the open source community, we can chart their developer activity alongside the various funding rounds.

        The following exhibit plots the combined developer activity of 50 OSS projects that have participated in at least 5 Gitcoin rounds over the years. Critically, the analysis starts before the projects start receiving funding from Gitcoin. (Tor, for instance, has been around since before 2010.)
        """),
        mo.ui.plotly(_fig),
        mo.md("""
        These 50 OSS projects have received a total of $9.4M from Gitcoin Grants (almost a quarter of all grants given out since GR1). Many received over $250K and some as much as $500K cumulatively. Virtually all of the projects applied to every round on cGrants and the majority also continued to apply on Allo.

        Over the same period, these projects have grown dramatically in terms of contributor and developer numbers. Applying Electric Capital's definition of a full-time developer (someone who has committed code to a project on more than 10 distinct days in a given month), these projects have 69 full-time contributors and an additional 233 part-time developers. These are up from 3 full-time and 28 part-time developers in 2018 (prior to Gitcoin Grants).

        Although there are a few projects with very large contributor numbers (eg, DefiLlama, Wallet Connect, wagmi), virtually all 50 in the cohort had ongoing activity in 2023. Developer growth slowed down during the bear market of 2022/23 but did not retreat back to pre-2022 levels.
        """)
    ])
    return


@app.cell
def blog_roi(grants, impact, mo, multiplier):
    oss_grants = grants['total_usd'].sum()
    oss_devs = impact[impact['quarter'] == '2023Q4']['full-time'].sum()
    roi = oss_devs / oss_grants * 1_000_000

    cum_grants_stat = mo.stat(
        label="Cumulative Grants to Top 50 OSS",
        value=f"${oss_grants/1_000_000:.1f}M",
        bordered=True
    )

    ft_devs_stat = mo.stat(
        label="Full-time Developers (2023Q4)",
        value=f"{int(oss_devs):,}",
        bordered=True
    )

    roi_stat = mo.stat(
        label="$1M in Grants â FT Devs",
        value=f"{roi:.1f}",
        bordered=True
    )

    roi_multiplier_stat = mo.stat(
        label="With Crowdfunding Multiplier",
        value=f"{roi*multiplier:.1f}",
        bordered=True,
        caption="Full-time developer equivalents"
    )

    mo.vstack([
        mo.md("""
        The most interesting finding is the correlation between Gitcoin Grants and developer growth. Overall, we see that there has been $135K in grant funding per full-time developer. In other words, for every $1M that has been paid out in grants since 2019, there are 7.4 full-time developers who are still around today.

        If we factor in the crowdfund multiplier of 0.75, then every $1M put into the matching pool correlates to 13 retained full-time developers.
        """),
        mo.hstack([cum_grants_stat, ft_devs_stat, roi_stat, roi_multiplier_stat], widths="equal", gap=1),
        mo.md("""
        Sure, the average developer who views Gitcoin Grants as a meaningful source of income is likely to be more missionary than mercenary. However, for ecosystems that want to grow their developer numbers, these are still some pretty compelling results.

        Feel free to pick these numbers apart. You can view the datasets and the notebook I used to prepare the exhibits [here](https://github.com/opensource-observer/insights/blob/main/analysis/gitcoin/2024-02-09%20Gitcoin%20Grants%20%3D%20Growth.ipynb).
        """)
    ])
    return


@app.cell
def blog_finale(
    CYAN,
    END,
    GREEN,
    START,
    WHITE,
    go,
    grant_stats,
    grants,
    impact,
    mo,
    ordered_projects_list,
    project_names,
    projects_first_rounds,
    quarter_mapping,
    quarters,
):
    start_q, end_q = (quarter_mapping.get(START), quarter_mapping.get(END))

    # Prepare the three main vectors
    contributors_vector = impact.groupby('quarter')['contributors'].sum()
    parttime_vector = impact.groupby('quarter')['part-time'].sum()
    fulltime_vector = impact.groupby('quarter')['full-time'].sum()

    # Scale to show growth multiples
    contributors_scaled = contributors_vector / contributors_vector.iloc[0]
    parttime_scaled = parttime_vector / parttime_vector.iloc[0]
    fulltime_scaled = fulltime_vector / fulltime_vector.iloc[0]

    # Calculate CAGR for each metric
    contributors_cagr = round(((contributors_vector.iloc[-1] / contributors_vector.iloc[0]) ** (1 / len(contributors_vector)) - 1) * 100, 1)
    parttime_cagr = round(((parttime_vector.iloc[-1] / parttime_vector.iloc[0]) ** (1 / len(parttime_vector)) - 1) * 100, 1)
    fulltime_cagr = round(((fulltime_vector.iloc[-1] / fulltime_vector.iloc[0]) ** (1 / len(fulltime_vector)) - 1) * 100, 1)

    _fig = go.Figure()

    # Add the three main trend lines
    _fig.add_trace(go.Scatter(
        x=list(range(len(contributors_scaled))),
        y=contributors_scaled,
        mode='lines',
        name='Contributors',
        line=dict(color=CYAN, width=4),
        opacity=0.75,
        hovertemplate='<b>Contributors</b><br>%{y:.2f}x growth<extra></extra>'
    ))

    _fig.add_trace(go.Scatter(
        x=list(range(len(parttime_scaled))),
        y=parttime_scaled,
        mode='lines',
        name='Part-time developers',
        line=dict(color='#6935FF', width=4),
        opacity=0.75,
        hovertemplate='<b>Part-time developers</b><br>%{y:.2f}x growth<extra></extra>'
    ))

    _fig.add_trace(go.Scatter(
        x=list(range(len(fulltime_scaled))),
        y=fulltime_scaled,
        mode='lines',
        name='Full-time developers',
        line=dict(color=GREEN, width=4),
        opacity=0.75,
        hovertemplate='<b>Full-time developers</b><br>%{y:.2f}x growth<extra></extra>'
    ))

    # Add vertical lines for funding rounds and annotations
    annotations = []
    shapes = []

    ymax = max(contributors_scaled.max(), parttime_scaled.max(), fulltime_scaled.max())
    ysub = -(ymax * 0.1)
    ysub_offset = ymax * 0.0225

    # Format helper functions
    amt_fmt = lambda a: '<$0.1M' if a < 100000 else f'${a / 1000000:.1f}M'
    amt_fmt_k = lambda a: '<$1K' if a < 1000 else f'${a / 1000:.0f}K'

    # Add legend labels at the end of lines
    annotations.append(dict(
        x=end_q + 0.25,
        y=contributors_scaled.iloc[-1],
        text=f"Contributors<br>+{contributors_cagr}% growth (QoQ)<br>({int(contributors_vector.iloc[0]):,} â {int(contributors_vector.iloc[-1]):,})",
        showarrow=False,
        xanchor='left',
        yanchor='middle',
        font=dict(color=GREEN, size=10),
        bgcolor=WHITE
    ))

    annotations.append(dict(
        x=end_q + 0.25,
        y=parttime_scaled.iloc[-1],
        text=f"Part-time developers<br>+{parttime_cagr}% growth (QoQ)<br>({int(parttime_vector.iloc[0]):,} â {int(parttime_vector.iloc[-1]):,})",
        showarrow=False,
        xanchor='left',
        yanchor='middle',
        font=dict(color=GREEN, size=10),
        bgcolor=WHITE
    ))

    annotations.append(dict(
        x=end_q + 0.25,
        y=fulltime_scaled.iloc[-1],
        text=f"Full-time developers<br>+{fulltime_cagr}% growth (QoQ)<br>({int(fulltime_vector.iloc[0]):,} â {int(fulltime_vector.iloc[-1]):,})",
        showarrow=False,
        xanchor='left',
        yanchor='middle',
        font=dict(color=GREEN, size=10),
        bgcolor=WHITE
    ))

    # Add funding round annotations
    annotations.append(dict(
        x=-0.25,
        y=ysub / 2,
        text='<b>Funding to top<br>50 OSS projects<br>by grants round</b>',
        showarrow=False,
        xanchor='left',
        yanchor='middle',
        font=dict(color=GREEN, size=9)
    ))

    for i, ((quarter, round_name), amount) in enumerate(grant_stats.items()):
        x = quarter_mapping.get(quarter)
        if not x:
            continue

        # Add vertical line
        shapes.append(dict(
            type='line',
            x0=x, x1=x,
            y0=1, y1=ymax * 0.95,
            line=dict(color=GREEN, width=0.5),
            opacity=0.5
        ))

        # Round name and amount
        amt = amt_fmt(amount)
        annotations.append(dict(
            x=x,
            y=ysub / 2,
            text=f'<b>{round_name}</b><br>{amt}',
            showarrow=False,
            xanchor='center',
            yanchor='middle',
            font=dict(color=GREEN, size=9)
        ))

        # Project-level funding details
        first_round_projects = projects_first_rounds.get(quarter)
        for y_idx, project_slug in enumerate(ordered_projects_list):
            filtered_grants = grants[grants['quarter'] == quarter]
            included_projects = filtered_grants['oso_slug'].to_list()
            if project_slug not in included_projects:
                continue

            # Show project name if it's their first round
            if first_round_projects and project_slug in first_round_projects:
                annotations.append(dict(
                    x=x - 0.25,
                    y=ysub - y_idx * ysub_offset,
                    text=f'{project_names.get(project_slug, project_slug)}',
                    showarrow=False,
                    xanchor='right',
                    yanchor='middle',
                    font=dict(color=GREEN, size=8)
                ))

            # Show funding amount
            result = filtered_grants[filtered_grants['oso_slug'] == project_slug]['total_usd'].sum()
            label = amt_fmt_k(result)
            annotations.append(dict(
                x=x,
                y=ysub - y_idx * ysub_offset,
                text=label,
                showarrow=False,
                xanchor='center',
                yanchor='middle',
                font=dict(color='grey', size=8),
                opacity=0.5
            ))

    # Add total funding column
    annotations.append(dict(
        x=end_q + 2,
        y=ysub / 2,
        text=f'<b>Total</b><br>{amt_fmt(grant_stats.sum())}',
        showarrow=False,
        xanchor='right',
        yanchor='middle',
        font=dict(color=GREEN, size=9)
    ))

    for y_idx, project_slug in enumerate(ordered_projects_list):
        funding = grants[grants['oso_slug'] == project_slug]['total_usd'].sum()
        annotations.append(dict(
            x=end_q + 2,
            y=ysub - y_idx * ysub_offset,
            text=amt_fmt_k(funding),
            showarrow=False,
            xanchor='right',
            yanchor='middle',
            font=dict(color=GREEN, size=8)
        ))

    _fig.update_layout(
        title=dict(
            text='<b>Grants = Growth: Quarterly developer metrics for the top 50 OSS projects on Gitcoin Grants since 2018</b>',
            x=0,
            xanchor='left',
            y=0.98
        ),
        paper_bgcolor=WHITE,
        plot_bgcolor=WHITE,
        font=dict(family="monospace", size=12, color=GREEN),
        height=1000,
        margin=dict(t=80, l=50, r=200, b=200),
        showlegend=False,
        xaxis=dict(
            title='',
            showgrid=False,
            linecolor=GREEN,
            range=[start_q, end_q + 2.5],
            tickmode='array',
            tickvals=list(range(0, len(quarters), 4)),
            ticktext=[str(x) for x in range(2018, 2024)]
        ),
        yaxis=dict(
            title='',
            showgrid=True,
            gridcolor='#E0E0E0',
            linecolor=GREEN,
            tickmode='array',
            tickvals=[2, 5, 10, 15, 20],
            ticktext=['2x', '5x', '10x', '15x', '20x']
        ),
        annotations=annotations,
        shapes=shapes,
        hovermode='x unified'
    )

    mo.vstack([
        mo.md('<span style="font-size: small;">_The chart below shows the relationship between grants funding and developer growth. Hover for details or zoom in on specific areas._</span>'),
        mo.ui.plotly(_fig)
    ])
    return


@app.cell
def _(mo):
    mo.vstack([
        mo.md("---"),
        mo.accordion({
            "Methodology": """
            - Analyzes Gitcoin Grants funding data from GR1 (2019) through GG19 (2023)
            - Identifies the top 50 OSS projects by maximum contributor count that participated in multiple rounds
            - Tracks quarterly metrics: contributors, part-time developers, and full-time developers
            - Segments grants history into four phases based on program evolution
            - Calculates QF multipliers and ROI metrics for funded projects
            - Applies Electric Capital's definition of full-time developers (10+ commit days per month)
            """,
            "Data Sources": """
            - [Gitcoin Grants Data (GitHub)](https://raw.githubusercontent.com/opensource-observer/insights/refs/heads/main/analysis/gitcoin/data)
            - OSS Developer Impact Metrics (active developers, contributors by quarter)
            - Project metadata from OSS Directory
            - Funding data includes both direct contributions and matching pools
            """,
            "Further Resources": """
            - [Original Analysis Notebook](https://github.com/opensource-observer/insights/blob/main/analysis/gitcoin/)
            - [Gitcoin Impact Dashboard](https://impact.gitcoin.co/)
            """
        })
    ])
    return


@app.cell
def _():
    return


if __name__ == "__main__":
    app.run()
