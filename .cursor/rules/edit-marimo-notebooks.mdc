---
description: Use this rule when asked to create or edit a marimo notebook in this repo
alwaysApply: false
---

# üîß Cleaned & Optimized Cursor Rule for Marimo Notebooks (OSO)

## 1. Notebook Architecture

### 1.1 Required Cells (MUST)
| Cell | Purpose | Pattern |
|------|----------|----------|
| `setup_pyoso()` | Initialize `pyoso` client & DB connection | Use **exact** code below |
| `about_app(mo)` | Provide title, metadata, and accordion documentation | Use **exact** vstack pattern |

### 1.2 Optional Cells (SHOULD)
- `import_libraries()` ‚Äî standardize imports  
- `configuration_settings(mo)` ‚Äî all UI inputs  
- `get_data(...)` ‚Äî query or fetch data  
- `filter_data(...)` ‚Äî data transformation  
- `generate_stats(mo, ...)` ‚Äî summary metrics  
- `generate_table(mo, ...)` ‚Äî tabular display  
- `generate_plot(mo, ...)` ‚Äî visualizations  
- helper cells with `_()` prefix ‚Äî utilities and internal logic  

**Ordering Rule (Top‚ÜíBottom):**
```
1. setup_pyoso()
2. about_app(mo)
3. import_libraries()
4. configuration_settings()
5. get_data()
6. filter_data()
7. generate_stats()
8. generate_table()
9. generate_plot()
10. helper cells
```

---

## 2. Required Patterns

### 2.1 Setup Cell
```python
@app.cell
def setup_pyoso():
    import marimo as mo
    from pyoso import Client
    client = Client()
    try:
        pyoso_db_conn = client.dbapi_connection()
    except Exception:
        pyoso_db_conn = None
    return mo, client, pyoso_db_conn
```

### 2.2 About App Cell
```python
@app.cell
def about_app(mo):
    mo.vstack([
        mo.md("""
        # App Title
        <small>Author: <span style="background-color:#f0f0f0;padding:2px 4px;border-radius:3px;">OSO Team</span>
        ¬∑ Last Updated: <span style="background-color:#f0f0f0;padding:2px 4px;border-radius:3px;">[Date]</span></small>
        """),
        mo.md("""
        Brief description of what this app does and key context.
        """),
        mo.accordion({
            "<b>Click to see details</b>": mo.accordion({
                "Methodology": """
                - How the app works  
                - Key metrics and caveats
                """,
                "Data Sources": """
                - Project registries  
                - Event data  
                - Spreadsheets / connectors
                """,
                "Further Resources": """
                - [Pyoso Docs](https://docs.opensource.observer/docs/get-started/python)  
                - [Semantic Layer](https://docs.opensource.observer/docs/get-started/using-semantic-layer)  
                - [Marimo Docs](https://docs.marimo.io/)
                """
            })
        })
    ])
    return
```

---

## 3. Data & Display Discipline

### 3.1 Data Cells
- Return values (never UI)
- Example:
```python
@app.cell
def get_data(client):
    _query = "SELECT * FROM table"
    df_data = client.to_pandas(_query)
    return (df_data,)
```

### 3.2 Display Cells
- Render output directly; never return widgets  
- Example:
```python
@app.cell
def generate_stats(df_data, mo):
    stat = mo.stat(label="Count", value=f"{len(df_data):,}")
    mo.vstack([mo.md("### Key Metrics"), stat])
    return
```

**Key distinction:**  
- Data cells = **return values**  
- Display cells = **show outputs**

---

## 4. Variable Naming Rules

| Type | Prefix | Example |
|------|---------|----------|
| Shared across cells | none | `df_data`, `project_input` |
| Cell-private | `_` | `_query`, `_fig`, `_result` |
| UI widgets | `*_input` | `metric_input`, `project_input` |

**Rules:**
- Never define the same variable name across cells  
- Never return `_`-prefixed variables  
- Helper functions inside cells use `_make_*` prefix  

---

## 5. UI Standards

- Use `mo.ui.*` widgets (`dropdown`, `multiselect`, `slider`, etc.)
- Widget variables **must end in `_input`**
- Consume `.value` explicitly downstream
- Group related controls in `mo.vstack()`  
- Gate heavy operations:
```python
run_input = mo.ui.run_button()
mo.stop(not run_input.value)
```

---

## 6. Visualization Standards

**Defaults:**
- Use `plotly` (no seaborn, no matplotlib by default)
- Left-align titles
- Avoid secondary y-axes
- Prefer light backgrounds

```python
def make_fig(df, title=""):
    import plotly.express as px
    fig = px.line(df, x="sample_date", y=df.columns[1:], title=f"<b>{title}</b>")
    fig.update_layout(
        font=dict(size=12, color="#111"),
        title=dict(x=0, xanchor="left"),
        paper_bgcolor="white",
        plot_bgcolor="white",
        margin=dict(t=40, l=20, r=20, b=20)
    )
    return fig
```

---

## 7. SQL Style Guide

**Dialect:** Trino  
**Indentation:** 2 spaces  
**Rules:**
- One column per line  
- No trailing semicolons  
- Use CTEs for clarity  
- Use comments for logic  
- Prefer either of:
```python
# Using pyoso client
df = client.to_pandas("""
  SELECT col1, col2
  FROM table
""")

# Using mo.sql
df = mo.sql("""
  SELECT col1, col2
  FROM table
""", engine=pyoso_db_conn)
```

---

## 8. Performance & Robustness

- Query only needed ranges  
- Use pagination for large tables  
- Handle empty data gracefully (never with early return)  
- Prefer empty figures/tables over conditional rendering  

---

## 9. Empty-State Handling

| Component | ‚ùå Wrong | ‚úÖ Correct |
|------------|----------|------------|
| **Stats** | Early return | Use `"0"` value |
| **Tables** | `if len(df)==0: return` | Let `mo.ui.table(df)` show empty table |
| **Plots** | Early return | Return empty `go.Figure()` with ‚ÄúNo data‚Äù annotation |

**Never:** use early `return` in Marimo cells.  
**Always:** execute fully; let components handle emptiness.

---

## 10. State & Reactivity

- Avoid `mo.state` except for persistence or synchronization  
- Prefer explicit reactive flows (value-based dependency)  

---

## 11. Code Style

| Element | Convention |
|----------|-------------|
| Python | 4 spaces |
| SQL | 2 spaces |
| Constants | `UPPER_CASE` |
| Widgets | `*_input` |
| Locals | `_var` |
| Figures | `fig_*` |
| Comments | concise and functional |
| Functions | short, single-purpose |

---

## 12. Documentation Practices

- Use Markdown cells for context, headers, and methodology  
- Inline comments for non-obvious transformations  
- Each notebook must read top-to-bottom as a coherent narrative

---

## 13. Prohibited Anti-Patterns

| Anti-Pattern | Why Forbidden | Correct Alternative |
|---------------|---------------|----------------------|
| Premature `return` | breaks reactivity | let UI render empty |
| Conditional rendering | inconsistent UI | render empty widget |
| Duplicated variable names | breaks Marimo | use `_` prefix for locals |
| Returning `_` variables | breaks deps | return only non-prefixed |
| Hardcoded constants | non-configurable | use inputs |
| Over-mixed logic | unreadable | split into data + display |
| Hidden widget use | opaque state | consume `.value` explicitly |

---

## 14. Recommended Workflow

1. Define objective  
2. Add required cells (`setup_pyoso`, `about_app`)  
3. Import + configure  
4. Fetch data  
5. Transform and validate  
6. Build UI  
7. Create visualizations  
8. Document app in markdown + accordion  
9. Test reactivity and errors  
