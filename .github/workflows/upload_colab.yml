name: Upload Notebook → Colab → MDX → PR to oso repo

on:
  push:
    branches:
      - main                      # run only after PRs merge to main
    tags-ignore:
      - "**"                      # never fire for tag pushes
    paths:
      - "tutorials/data-science/**/*.ipynb"

permissions:
  contents: write
  pull-requests: write

jobs:
  send-pull-requests:
    runs-on: ubuntu-latest
    environment: deploy
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      COLAB_FOLDER_ID:    ${{ vars.COLAB_FOLDER_ID }}
      COLAB_DRIVE_ID:     ${{ vars.COLAB_DRIVE_ID }}
      GEMINI_API_KEY:     ${{ secrets.GEMINI_API_KEY }}
      TARGET_PAT:         ${{ secrets.TARGET_PAT }}

    steps:
    # Full-depth checkout so tags & history are present
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0            # important for tag / diff look-ups

    - uses: actions/setup-python@v5
      with: { python-version: "3.10" }

    - name: Install deps
      run: |
        pip install nbconvert \
                   google-api-python-client \
                   google-auth google-auth-httplib2 google-auth-oauthlib \
                   google-genai

    # List .ipynb files touched in this push
    - name: Find notebooks changed in this push
      id: list
      run: |
        NOTEBOOKS=$(git diff -M --name-only --diff-filter=AMR \
          "${{ github.event.before }}" "${{ github.sha }}" \
          | grep '\.ipynb$' || true)

        echo "notebooks<<EOF" >> "$GITHUB_OUTPUT"
        echo "$NOTEBOOKS" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        if [ -z "$NOTEBOOKS" ]; then
          echo "No new or modified .ipynb files; skipping workflow."
          exit 0
        fi

    # Upload each notebook → Colab & create .mdx
    - name: Upload & convert to MDX
      if: steps.list.outputs.notebooks != ''
      run: |
        mkdir -p mdx_build
        while read -r NB; do
          [ -z "$NB" ] && continue
          echo "Processing $NB"

          BASENAME="$(basename "$NB" .ipynb)"

          # Upload to Drive ⇒ Colab link
          LINK=$(python scripts/upload_to_drive.py "$NB" \
                  --folder "$COLAB_FOLDER_ID")

          # ipynb ⇒ markdown (save images as seperate folder)
          jupyter nbconvert "$NB" \
                --to markdown \
                --output     "$BASENAME" \
                --output-dir mdx_build

          MARKDOWN_PATH="mdx_build/${BASENAME}.md"
          MDX_OUT="mdx_build/${BASENAME}.mdx"

          printf '<a href="%s" target="_blank">Open in Colab</a>\n\n' "$LINK" > "$MDX_OUT"
          cat "$MARKDOWN_PATH" >> "$MDX_OUT"
        done <<< "${{ steps.list.outputs.notebooks }}"

        # Stage for oso repo layout
        mkdir -p mdx_build/apps/docs/docs/tutorials
        mv mdx_build/*.mdx mdx_build/apps/docs/docs/tutorials/
        mv mdx_build/*_files           mdx_build/apps/docs/docs/tutorials/ 2>/dev/null || true

    # Update tutorials index with Gemini
    - name: Update tutorials index with Gemini
      if: steps.list.outputs.notebooks != ''
      run: python scripts/update_tutorial_index.py

    # Checkout the oso docs repo (as a workspace sub-dir)
    - name: Checkout oso repo
      if: steps.list.outputs.notebooks != ''
      uses: actions/checkout@v4
      with:
        repository: opensource-observer/oso          # target repo
        token: ${{ secrets.TARGET_PAT }}             # PAT must write to oso
        path:   oso                                  # work in ./oso
        fetch-depth: 0                               # keep full history
    
    - name: Copy new MDX files into oso repo
      if: steps.list.outputs.notebooks != ''
      run: |
        mkdir -p oso/apps/docs/docs/tutorials    # safety

        # copy files to keep existing content
        rsync -a mdx_build/apps/docs/docs/tutorials/ \
              oso/apps/docs/docs/tutorials/

        # explicitly copy the regenerated index so it always overwrites
        rsync -a mdx_build/apps/docs/docs/tutorials/index.* \
              oso/apps/docs/docs/tutorials/

    # Copy MDX, then auto-commit & open/update PR
    - name: Create PR in oso with new tutorials
      if: steps.list.outputs.notebooks != ''
      uses: peter-evans/create-pull-request@v5       # or latest tag
      with:
        token: ${{ secrets.TARGET_PAT }}
        commit-message: |
          docs: add auto-generated MDX tutorial(s)
        title: "Add MDX tutorial(s) - run ${{ github.run_id }}"
        body: "Auto-generated MDX files from **${{ github.repository }}**."
        branch: auto/tutorial-mdx-${{ github.run_id }}
        base: main
        path: oso                            # run inside ./oso
        add-paths: |
          apps/docs/docs/tutorials/*.mdx # files to track
          apps/docs/docs/tutorials/*_files/**   # track all extracted images
