name: Upload Notebook ‚Üí Colab ‚Üí MDX ‚Üí PR to oso repo

on:
  push:
    branches:
      - main                      # run only after PRs merge to main
    tags-ignore:
      - "**"                      # never fire for tag pushes
    paths:
      - "tutorials/data-science/**/*.ipynb"

permissions:
  contents: write
  pull-requests: write

jobs:
  send-pull-requests:
    runs-on: ubuntu-latest
    environment: deploy
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      COLAB_FOLDER_ID:    ${{ vars.COLAB_FOLDER_ID }}
      COLAB_DRIVE_ID:     ${{ vars.COLAB_DRIVE_ID }}
      GEMINI_API_KEY:     ${{ secrets.GEMINI_API_KEY }}
      TARGET_PAT:         ${{ secrets.TARGET_PAT }}

    steps:
    # Full-depth checkout so tags & history are present
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0            # important for tag / diff look-ups

    - uses: actions/setup-python@v5
      with: { python-version: "3.10" }

    - name: Install deps
      run: |
        pip install nbconvert \
                   google-api-python-client \
                   google-auth google-auth-httplib2 google-auth-oauthlib \
                   google-genai

    # List .ipynb files touched in this push
    - name: Find notebooks changed in this push
      id: list
      run: |
        NOTEBOOKS=$(git diff -M --name-only --diff-filter=AMR \
          "${{ github.event.before }}" "${{ github.sha }}" \
          | grep '\.ipynb$' || true)

        echo "notebooks<<EOF" >> "$GITHUB_OUTPUT"
        echo "$NOTEBOOKS" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        if [ -z "$NOTEBOOKS" ]; then
          echo "No new or modified .ipynb files; skipping workflow."
          exit 0
        fi

    # Upload each notebook ‚Üí Colab & create .mdx
    - name: Upload & convert to MDX
      if: steps.list.outputs.notebooks != ''
      run: |
        mkdir -p mdx_build
        while read -r NB; do
          [ -z "$NB" ] && continue
          echo "Processing $NB"

          BASENAME="$(basename "$NB" .ipynb)"

          # Upload to Drive ‚áí Colab link
          LINK=$(python scripts/upload_to_drive.py "$NB" \
                  --folder "$COLAB_FOLDER_ID")

          # ipynb ‚áí markdown (save images as seperate folder)
          jupyter nbconvert "$NB" \
                --to markdown \
                --output     "$BASENAME" \
                --output-dir mdx_build

          MARKDOWN_PATH="mdx_build/${BASENAME}.md"
          MDX_OUT="mdx_build/${BASENAME}.mdx"

          printf '<a href="%s" target="_blank">Open in Colab</a>\n\n' "$LINK" > "$MDX_OUT"
          cat "$MARKDOWN_PATH" >> "$MDX_OUT"
        done <<< "${{ steps.list.outputs.notebooks }}"

        # Stage for oso repo layout
        mkdir -p mdx_build/apps/docs/docs/tutorials
        mv mdx_build/*.mdx mdx_build/apps/docs/docs/tutorials/
        mv mdx_build/*_files           mdx_build/apps/docs/docs/tutorials/ 2>/dev/null || true

<<<<<<< HEAD
    # Update tutorials index with Gemini
    - name: Update tutorials index with Gemini
      if: steps.list.outputs.notebooks != ''
      run: python scripts/update_tutorial_index.py

    # Checkout the oso docs repo (as a workspace sub-dir)
    - name: Checkout oso repo
      if: steps.list.outputs.notebooks != ''
      uses: actions/checkout@v4
      with:
        repository: opensource-observer/oso          # target repo
        token: ${{ secrets.TARGET_PAT }}             # PAT must write to oso
        path:   oso                                  # work in ./oso
        fetch-depth: 0                               # keep full history
    
    - name: Copy new MDX files into oso repo
      if: steps.list.outputs.notebooks != ''
      run: |
        mkdir -p oso/apps/docs/docs/tutorials    # safety

        # copy files to keep existing content
        rsync -a mdx_build/apps/docs/docs/tutorials/ \
              oso/apps/docs/docs/tutorials/

        # explicitly copy the regenerated index so it always overwrites
        rsync -a mdx_build/apps/docs/docs/tutorials/index.* \
              oso/apps/docs/docs/tutorials/

    # Copy MDX, then auto-commit & open/update PR
    - name: Create PR in oso with new tutorials
      if: steps.list.outputs.notebooks != ''
      uses: peter-evans/create-pull-request@v5       # or latest tag
      with:
        token: ${{ secrets.TARGET_PAT }}
        commit-message: |
          docs: add auto-generated MDX tutorial(s)
        title: "Add MDX tutorial(s) - run ${{ github.run_id }}"
        body: "Auto-generated MDX files from **${{ github.repository }}**."
        branch: auto/tutorial-mdx-${{ github.run_id }}
        base: main
        path: oso                            # run inside ./oso
=======
    # grab the current index.md from oso repo
    - name: Update tutorials index with Gemini
      if: steps.list.outputs.notebooks != ''
      env:
        TARGET_PAT: ${{ secrets.TARGET_PAT }}
      run: python scripts/update_tutorial_index.py

    # clone oso, copy files, push branch
    - name: Push MDX files to oso repo
      if: steps.list.outputs.notebooks != ''
      env:
        PAT: ${{ secrets.TARGET_PAT }}
      run: |
        set -euo pipefail
        BRANCH="auto/tutorial-mdx-${{ github.run_id }}"
        OSO="opensource-observer/oso"

        echo "Cloning $OSO"
        git clone --depth=1 --branch main "https://${GITHUB_ACTOR}:${PAT}@github.com/${OSO}.git" oso-work
        cd oso-work

        git config user.email "github-actions@github.com"
        git config user.name  "github-actions"

        echo "Creating/updating branch $BRANCH"
        if git rev-parse --verify "origin/$BRANCH" >/dev/null 2>&1; then
          git checkout "$BRANCH"
        else
          git checkout -b "$BRANCH"
        fi

        echo "Copying MDX files into repo"
        rsync -a --delete \
          ../mdx_build/apps/docs/docs/tutorials/ \
          apps/docs/docs/tutorials/

        echo "Committing changes (if any)"
        if ! git diff --quiet; then
          git add apps/docs/docs/tutorials/
          git commit -m "docs: add auto-generated MDX tutorial(s)"
          git push --set-upstream origin "$BRANCH"
        else
          echo "No diff - nothing to commit."
        fi

    # open or update PR 
    - name: Open / update pull request in oso
      if: steps.list.outputs.notebooks != ''
      env:
        GH_TOKEN: ${{ secrets.TARGET_PAT }}   # PAT with write access to oso
      run: |
        set -euo pipefail
        BRANCH="auto/tutorial-mdx-${{ github.run_id }}"
        OSO="opensource-observer/oso"

        echo "üìù Creating (or updating) PR in $OSO"
        gh pr create \
          --repo "$OSO" \
          --head "$BRANCH" \
          --base main \
          --title "Add MDX tutorial(s) - run ${{ github.run_id }}" \
          --body "Auto-generated MDX files created from notebooks merged into **${{ github.repository }}**.\n\nPlease review; oso-repo CI must pass before merge." \
<<<<<<< HEAD
          --fill || true   # exits 1 if PR already exists

        # If the PR exists, gh pr create exits with status 1.
        # Optionally you can 'gh pr edit' here to append to the body, etc.

>>>>>>> 5183ad7 (test: trigger workflow)
=======
          --fill || true   # non-zero if PR already exists ‚Äì that's fine
>>>>>>> 1b6943f (test: trigger workflow)
